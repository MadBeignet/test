public class MatchSnitch extends BaseSnitch {

    private int _minimumRespawnYValue;
    private int _maximumRespawnYValue;

    private int _borderMinZ;
    private int _borderMaxZ;
    private int _borderMinX;
    private int _borderMaxX;

    private int _range;

    private double _defaultIntersecValueIncorrect;

    @Override
    public void loadValues() {
        super.loadValues();
        FileConfiguration quidditchVariables = DAQuidditch.getQuidditchVariables();

        _minimumRespawnYValue = quidditchVariables.getInt("Snitch.Spawning.Y value.Minimum", 168);
        _maximumRespawnYValue = quidditchVariables.getInt("Snitch.Spawning.Y value.Maximum", 240);

        _borderMinZ = quidditchVariables.getInt("Snitch.Spawning.Border.Z value.Minimum", -292);
        _borderMaxZ = quidditchVariables.getInt("Snitch.Spawning.Border.Z value.Maximum", 297);
        _borderMinX = quidditchVariables.getInt("Snitch.Spawning.Border.X value.Minimum", -312);
        _borderMaxX = quidditchVariables.getInt("Snitch.Spawning.Border.X value.Maximum", 277);

        _range = quidditchVariables.getInt("Snitch.Spawning.Range", 100);

        _defaultValue = 0;
    }

    @Override
    protected Location generateSpawnLocation() {
        if(_playersToAvoid.size() != 2) {
            return super.generateSpawnLocation();
        }

        // This is not necessarily the actual home/away seeker. Do not assume.
        Player homeSeeker, awaySeeker;

        try {
            homeSeeker = Bukkit.getPlayer((UUID) _playersToAvoid.toArray()[0]);
            awaySeeker = Bukkit.getPlayer((UUID) _playersToAvoid.toArray()[1]);

            if(homeSeeker == null || awaySeeker == null) {
                throw new NullPointerException("Home or away seeker is null");
            }
        } catch(Exception exception) {
            return super.generateSpawnLocation();
        }


        // Diagram: https://media.discordapp.net/attachments/779812032920158228/779827414636953600/image0.png

        double _xIntersecHomePosZ = _defaultValue;
        double _xIntersecHomeNegZ = _defaultValue;
        double _xIntersecAwayPosZ = _defaultValue;
        double _xIntersecAwayNegZ = _defaultValue;

        // It cannot be assumed these are the actual home/away. They are just the two different seekers.
        int homeSeekerX = homeSeeker.getLocation().getBlockX();
        int homeSeekerZ = homeSeeker.getLocation().getBlockZ();
        int awaySeekerX = awaySeeker.getLocation().getBlockX();
        int awaySeekerZ = awaySeeker.getLocation().getBlockZ();

        // Because the arena is about 600 wide each way and each seeker takes up 200 each optimally, then the snitch can spawn on any x value
        int snitchSpawnLocX = (int) (Math.random() * (_borderMaxX - _borderMinX) + _borderMinX + 1);

        // So in this first part I basically just created the equation of a circle and found both potential points using the random x value
        double homeExistence = Math.pow(_range, 2) - Math.pow(snitchSpawnLocX - homeSeekerX, 2);
        if (homeExistence >= _defaultValue) {
            _xIntersecHomePosZ= ((Math.sqrt(homeExistence)) + homeSeekerZ);
            _xIntersecHomeNegZ = (((-(Math.sqrt(homeExistence)))) + homeSeekerZ);

            if (_xIntersecHomePosZ> _borderMaxZ) {
                _xIntersecHomePosZ= _borderMaxZ; // basically just makes sure that the values on the circle don't go outside of the map
            }
            if (_xIntersecHomeNegZ < _borderMinZ) {
                _xIntersecHomeNegZ = _borderMinZ;
            }
        }

        // same as above but for away seeker
        double awayExistence  = Math.pow(_range, 2) - Math.pow(snitchSpawnLocX - awaySeekerX, 2);
        if (awayExistence  >= _defaultValue) {
            _xIntersecAwayPosZ = (Math.sqrt(Math.abs(awayExistence ))) + awaySeekerZ;
            _xIntersecAwayNegZ = ((-(Math.sqrt(Math.abs(awayExistence )))) + awaySeekerZ);
            if (_xIntersecAwayPosZ > _borderMaxZ) {
                _xIntersecAwayPosZ = _borderMaxZ; // again, can't be a point outside of the map
            }
            if (_xIntersecAwayNegZ < _borderMinZ) {
                _xIntersecAwayNegZ = _borderMinZ;
            }
        }

        int homeSeekerZRange = _defaultValue, awaySeekerZRange = _defaultValue;
        // 84-124 is tests for how the range (areas where the snitch cannot spawn) should be interpreted
        // if away circle doesn't exist but home does this created a problem so used the existence variable to check if greater than default or 0
        // testing for overlap between the circles
        if (_xIntersecHomePosZ> _xIntersecAwayNegZ && awayExistence >= _defaultValue && Math.abs(_xIntersecHomePosZ- _xIntersecAwayNegZ) < Math.abs(_xIntersecHomePosZ- _xIntersecHomeNegZ)) {
            homeSeekerZRange = (int) (Math.abs(_xIntersecHomePosZ- _xIntersecHomeNegZ) - (Math.abs(_xIntersecHomePosZ- _xIntersecAwayNegZ))) + 1;
            awaySeekerZRange = (int) Math.abs(_xIntersecAwayPosZ - _xIntersecAwayNegZ) + 1;

        }

        // same as above
        if (_xIntersecAwayPosZ > _xIntersecHomeNegZ && homeExistence >= _defaultValue && Math.abs(_xIntersecAwayPosZ - _xIntersecHomeNegZ) < Math.abs(_xIntersecAwayPosZ - _xIntersecAwayNegZ)) {
            homeSeekerZRange = (int) (Math.abs(_xIntersecHomePosZ- _xIntersecHomeNegZ) - (Math.abs(_xIntersecAwayPosZ - _xIntersecHomeNegZ))) + 1;
            awaySeekerZRange = (int) Math.abs(_xIntersecAwayPosZ - _xIntersecAwayNegZ) + 1;

        }

        // checks if one range is inside of the other range and accounts for that
        boolean homeAwayCirclesOverlap  = (_xIntersecHomePosZ>= _xIntersecAwayPosZ && _xIntersecHomeNegZ <= _xIntersecAwayNegZ) || (_xIntersecAwayPosZ >= _xIntersecHomePosZ&& _xIntersecAwayNegZ <= _xIntersecHomeNegZ);
        if ((homeExistence >= _defaultValue && awayExistence >= _defaultValue) && homeAwayCirclesOverlap ) {
            if (Math.abs(_xIntersecHomePosZ- _xIntersecHomeNegZ) > Math.abs(_xIntersecAwayPosZ - _xIntersecAwayNegZ)) {
                homeSeekerZRange = (int) Math.abs(_xIntersecHomePosZ- _xIntersecHomeNegZ + 1) / 2;
                awaySeekerZRange = (int) Math.abs(_xIntersecHomePosZ- _xIntersecHomeNegZ + 1) / 2;
            } else {

                homeSeekerZRange = (int) Math.abs(_xIntersecAwayPosZ - _xIntersecAwayNegZ + 1) / 2;
                awaySeekerZRange = (int) Math.abs(_xIntersecAwayPosZ - _xIntersecAwayNegZ + 1) / 2;
            }
        }

        // this one basically just makes sure there is no overlap and that the bigger value on one circle is less than the smaller value on another
        if ((homeExistence >= _defaultValue && awayExistence >= _defaultValue) && (_xIntersecHomePosZ< _xIntersecAwayNegZ || _xIntersecAwayPosZ <= _xIntersecHomeNegZ)) {
            homeSeekerZRange = (int) Math.abs(_xIntersecHomeNegZ - _xIntersecHomePosZ) + 1;
            awaySeekerZRange = (int) Math.abs(_xIntersecAwayNegZ - _xIntersecAwayPosZ) + 1;
        }

        // this one is for if home circle doesn't exist, homeSeekerZRange = 0 in this case
        if (homeExistence < _defaultValue && awayExistence  >= _defaultValue) {
            awaySeekerZRange = (int) Math.abs(_xIntersecAwayNegZ - _xIntersecAwayPosZ) + 1;
        }

        // this one is for if away circle doesn't exist, awaySeekerZRange = 0 in this case
        if (awayExistence  < _defaultValue && homeExistence >= _defaultValue) {
            homeSeekerZRange = (int) Math.abs(_xIntersecHomeNegZ - _xIntersecHomePosZ) + 1;
        }

        // this basically calculates the number of spawnable places for the snitch in the one line of the random x value entered from main method
        int snitchSpawnLocZ = (int) (Math.random() * (_borderMaxZ - _borderMinZ - homeSeekerZRange - awaySeekerZRange) + _borderMinZ);

        // all below is the area where snitchSpawnLocZ is tested whether it needs to be shifted
        //this is basically for points where the one range is around the other, but the point (snitchSpawnLocZ) is inside one or both of the ranges
        if (homeAwayCirclesOverlap  && ((snitchSpawnLocZ < _xIntersecHomePosZ&& snitchSpawnLocZ > _xIntersecHomeNegZ) || (snitchSpawnLocZ < _xIntersecAwayPosZ && snitchSpawnLocZ > _xIntersecAwayNegZ))) {
            snitchSpawnLocZ += homeSeekerZRange + awaySeekerZRange;
        }

        // makes sure both circles exist in the line and then sees if the point picked is in the unspawnable range, if so, adds the range of the circle on that line
        if ((awaySeekerZRange != _defaultValue && homeSeekerZRange > _defaultValue) && snitchSpawnLocZ <= _xIntersecHomePosZ&& snitchSpawnLocZ >= _xIntersecHomeNegZ) {
            //adds the range of the other circle if it runs into it after being added above
            snitchSpawnLocZ += homeSeekerZRange;

            if (snitchSpawnLocZ <= _xIntersecAwayPosZ && snitchSpawnLocZ >= _xIntersecAwayNegZ) {
                snitchSpawnLocZ += awaySeekerZRange;
            }
        }

        // same thing as above just flip flopped
        if ((awaySeekerZRange != _defaultValue && homeSeekerZRange > _defaultValue) && snitchSpawnLocZ <= _xIntersecAwayPosZ && snitchSpawnLocZ >= _xIntersecAwayNegZ) {
            snitchSpawnLocZ += awaySeekerZRange;

            if (snitchSpawnLocZ <= _xIntersecHomePosZ&& snitchSpawnLocZ >= _xIntersecHomeNegZ) {
                snitchSpawnLocZ += homeSeekerZRange;
            }
        }
   
        // here we reach the tests for nonexistent circles and if the z value needs to be shifted by the range of the existent circle
        if (homeSeekerZRange == _defaultValue && awaySeekerZRange != _defaultValue && snitchSpawnLocZ <= _xIntersecAwayPosZ && snitchSpawnLocZ >= _xIntersecAwayNegZ) {
            snitchSpawnLocZ += awaySeekerZRange;
        }

        if (awaySeekerZRange == _defaultValue && homeSeekerZRange != _defaultValue && snitchSpawnLocZ <= _xIntersecHomePosZ&& snitchSpawnLocZ >= _xIntersecHomeNegZ) {
            snitchSpawnLocZ += homeSeekerZRange;
        }

        // obviously no need to test if the ranges are both 0 because whatever random z value picked from the original snitchSpawnLocZ equation would work
        return new Location(FieldManager.MANAGER.getField().getWorld(), snitchSpawnLocX, _random.nextInt(_minimumRespawnYValue, _maximumRespawnYValue), snitchSpawnLocZ);
    }
}
